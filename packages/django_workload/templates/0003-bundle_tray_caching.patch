diff --git a/django-workload/django_workload/bundle_tray.py b/django-workload/django_workload/bundle_tray.py
index 36cf90b..7d0cba8 100644
--- a/django-workload/django_workload/bundle_tray.py
+++ b/django-workload/django_workload/bundle_tray.py
@@ -1,18 +1,30 @@
+import logging
+import time
+
+from django.core.cache import cache
+from django.core import serializers
+
 from .models import (
     BundleEntryModel,
     FeedEntryModel,
     UserModel,
 )

+logger = logging.getLogger(__name__)
+

 class BundleTray(object):
     def __init__(self, request):
         self.request = request

     def get_bundle(self):
+        start_time = time.time()
+
         bundles = list(
-            BundleEntryModel.objects
-            .filter(userid__in=self.request.user.following).limit(10))
+                BundleEntryModel.objects.filter(userid__in=self.request.user.following).limit(10))
+        logger.warning('[perf] bundle_tray::bundle_entry.objects.filter: {}'.format(time.time() - start_time))
+
+
         # only one bundle per user
         userids = {}
         feedentryids = []
@@ -22,18 +34,45 @@ class BundleTray(object):
             userids[bundle.userid] = bundle.id
             feedentryids += bundle.entry_ids
         first_bundleids = set(userids.values())
+
         # Fetch user information
-        userinfo = {}
-        for user in UserModel.objects.filter(id__in=list(userids)):
-            userinfo[user.id] = user.json_data
+        start_time = time.time()
+        userinfo = cache.get_many(list(userids))
+        if userinfo is not None:
+            missing_userinfo = [userid for userid in userids if userid not in userinfo]
+            if missing_userinfo:
+                for user in UserModel.objects.filter(id__in=missing_userinfo):
+                    userinfo[user.id] = user.json_data
+
+                cache.set_many({uid: userinfo[uid] for uid in missing_userinfo}, 60 * 5)
+        else:
+            for user in UserModel.objects.filter(id__in=list(userids)):
+                userinfo[user.id] = user.json_data
+            cache.set_many(userinfo, 60 * 5)
+        logger.warning('[perf] bundle_tray::user_model.objects.filter: {}'.format(time.time() - start_time))
+
         # fetch entry information
         feedentryinfo = {}
-        for feedentry in FeedEntryModel.objects.filter(id__in=list(feedentryids)):
-            feedentryinfo[feedentry.id] = {
-                'pk': str(feedentry.id),
-                'comment_count': feedentry.comment_count,
-                'published': feedentry.published.timestamp(),
-            }
+        start_time = time.time()
+        feedentryinfo = cache.get_many(list(feedentryids))
+        if feedentryinfo is not None:
+            missing_feedentryinfo = [fid for fid in feedentryids if fid not in feedentryinfo]
+            if missing_feedentryinfo:
+                for feedentry in FeedEntryModel.objects.filter(id__in=missing_feedentryinfo):
+                    feedentryinfo[feedentry.id] = {
+                        'pk': str(feedentry.id),
+                        'comment_count': feedentry.comment_count,
+                        'published': feedentry.published.timestamp(),
+                    }
+                cache.set_many({fid: feedentryinfo[fid] for fid in missing_feedentryinfo})
+        else:
+            for feedentry in FeedEntryModel.objects.filter(id__in=list(feedentryids)):
+                feedentryinfo[feedentry.id] = {
+                    'pk': str(feedentry.id),
+                    'comment_count': feedentry.comment_count,
+                    'published': feedentry.published.timestamp(),
+                }
+            cache.set_many(feedentryinfo, 60*5)

         result = {'bundle': [
             {
@@ -47,6 +86,7 @@ class BundleTray(object):
             }
             for b in bundles if b.id in first_bundleids
         ]}
+        logger.warning('[perf] bundle_tray::feed_entry.objects.filter+bundle_process: {}'.format(time.time() - start_time))
         return result

     def dup_sort_data(self, bundle_list, conf):

