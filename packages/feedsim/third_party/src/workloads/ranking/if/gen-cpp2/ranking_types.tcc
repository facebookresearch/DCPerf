/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "ranking/if/gen-cpp2/ranking_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>

namespace ranking {

} // ranking
namespace std {

} // std

namespace ranking {

} // ranking
namespace std {

} // std


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::ranking::Payload> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::ranking::Action> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::ranking::RankingObject> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::ranking::RankingStory> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};
template <>
struct TccStructTraits<::ranking::RankingResponse> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype);
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace ranking {

template <class Protocol_>
void Payload::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    
    iprot->readString(this->message);
    this->__isset.message = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Payload>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Payload::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Payload");
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->message);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Payload::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Payload");
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->message);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Payload::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Payload");
  xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->message);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Payload::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Payload::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Payload::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Payload::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Payload::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Payload::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Payload::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Payload::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // ranking
namespace ranking {

template <class Protocol_>
void Action::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I16))) {
    goto _loop;
  }
_readField_type:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::readWithContext(*iprot, this->type, _readState);
    this->__isset.type = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_timeUsec:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->timeUsec, _readState);
    this->__isset.timeUsec = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_timeMsec:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->timeMsec, _readState);
    this->__isset.timeMsec = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_actorID:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->actorID, _readState);
    this->__isset.actorID = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<Action>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I16))) {
        goto _readField_type;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_timeUsec;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_timeMsec;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_actorID;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t Action::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Action");
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->type);
  xfer += prot_->serializedFieldSize("timeUsec", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timeUsec);
  xfer += prot_->serializedFieldSize("timeMsec", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->timeMsec);
  xfer += prot_->serializedFieldSize("actorID", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->actorID);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Action::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Action");
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->type);
  xfer += prot_->serializedFieldSize("timeUsec", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->timeUsec);
  xfer += prot_->serializedFieldSize("timeMsec", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->timeMsec);
  xfer += prot_->serializedFieldSize("actorID", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->actorID);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Action::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Action");
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I16, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("timeUsec", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->timeUsec);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("timeMsec", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->timeMsec);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("actorID", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->actorID);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void Action::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Action::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Action::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Action::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void Action::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Action::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Action::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Action::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // ranking
namespace ranking {

template <class Protocol_>
void RankingObject::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_objectID:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->objectID, _readState);
    this->__isset.objectID = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_objectType:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingObjectType>::readWithContext(*iprot, this->objectType, _readState);
    this->__isset.objectType = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_actorID:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->actorID, _readState);
    this->__isset.actorID = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_createTime:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->createTime, _readState);
    this->__isset.createTime = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_payloadIntMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->payloadIntMap =  ::ranking::RankingPayloadIntMap();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,  ::ranking::RankingPayloadIntMap>::read(*iprot, this->payloadIntMap);
    this->__isset.payloadIntMap = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_payloadStrMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->payloadStrMap =  ::ranking::RankingPayloadStringMap();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::ranking::RankingPayloadStringMap>::read(*iprot, this->payloadStrMap);
    this->__isset.payloadStrMap = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_payloadVecMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->payloadVecMap =  ::ranking::RankingPayloadVecMap();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,  ::ranking::RankingPayloadVecMap>::read(*iprot, this->payloadVecMap);
    this->__isset.payloadVecMap = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_actions:
  {
    _readState.beforeSubobject(iprot);
    
    this->actions = ::std::vector< ::ranking::Action>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::Action>>::read(*iprot, this->actions);
    this->__isset.actions = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_weight:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->weight, _readState);
    this->__isset.weight = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<RankingObject>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_objectID;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_objectType;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_actorID;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_createTime;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_payloadIntMap;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_payloadStrMap;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_payloadVecMap;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_actions;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_weight;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t RankingObject::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RankingObject");
  xfer += prot_->serializedFieldSize("objectID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->objectID);
  xfer += prot_->serializedFieldSize("objectType", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingObjectType>::serializedSize<false>(*prot_, this->objectType);
  xfer += prot_->serializedFieldSize("actorID", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->actorID);
  xfer += prot_->serializedFieldSize("createTime", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->createTime);
  xfer += prot_->serializedFieldSize("payloadIntMap", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,  ::ranking::RankingPayloadIntMap>::serializedSize<false>(*prot_, this->payloadIntMap);
  xfer += prot_->serializedFieldSize("payloadStrMap", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::ranking::RankingPayloadStringMap>::serializedSize<false>(*prot_, this->payloadStrMap);
  xfer += prot_->serializedFieldSize("payloadVecMap", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,  ::ranking::RankingPayloadVecMap>::serializedSize<false>(*prot_, this->payloadVecMap);
  xfer += prot_->serializedFieldSize("actions", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::Action>>::serializedSize<false>(*prot_, this->actions);
  xfer += prot_->serializedFieldSize("weight", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->weight);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RankingObject::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RankingObject");
  xfer += prot_->serializedFieldSize("objectID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->objectID);
  xfer += prot_->serializedFieldSize("objectType", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingObjectType>::serializedSize<false>(*prot_, this->objectType);
  xfer += prot_->serializedFieldSize("actorID", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->actorID);
  xfer += prot_->serializedFieldSize("createTime", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->createTime);
  xfer += prot_->serializedFieldSize("payloadIntMap", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,  ::ranking::RankingPayloadIntMap>::serializedSize<false>(*prot_, this->payloadIntMap);
  xfer += prot_->serializedFieldSize("payloadStrMap", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::ranking::RankingPayloadStringMap>::serializedSize<false>(*prot_, this->payloadStrMap);
  xfer += prot_->serializedFieldSize("payloadVecMap", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,  ::ranking::RankingPayloadVecMap>::serializedSize<false>(*prot_, this->payloadVecMap);
  xfer += prot_->serializedFieldSize("actions", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::Action>>::serializedSize<false>(*prot_, this->actions);
  xfer += prot_->serializedFieldSize("weight", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->weight);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RankingObject::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RankingObject");
  xfer += prot_->writeFieldBegin("objectID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->objectID);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("objectType", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingObjectType>::write(*prot_, this->objectType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("actorID", apache::thrift::protocol::T_I64, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->actorID);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("createTime", apache::thrift::protocol::T_I64, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->createTime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("payloadIntMap", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,  ::ranking::RankingPayloadIntMap>::write(*prot_, this->payloadIntMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("payloadStrMap", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::ranking::RankingPayloadStringMap>::write(*prot_, this->payloadStrMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("payloadVecMap", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,  ::ranking::RankingPayloadVecMap>::write(*prot_, this->payloadVecMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("actions", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::Action>>::write(*prot_, this->actions);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("weight", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->weight);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void RankingObject::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t RankingObject::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t RankingObject::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t RankingObject::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void RankingObject::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t RankingObject::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t RankingObject::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t RankingObject::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // ranking
namespace ranking {

template <class Protocol_>
void RankingStory::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_storyID:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->storyID, _readState);
    this->__isset.storyID = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_objects:
  {
    _readState.beforeSubobject(iprot);
    
    this->objects = ::std::vector< ::ranking::RankingObject>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingObject>>::read(*iprot, this->objects);
    this->__isset.objects = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_weight:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->weight, _readState);
    this->__isset.weight = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_storyType:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingStoryType>::readWithContext(*iprot, this->storyType, _readState);
    this->__isset.storyType = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<RankingStory>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_storyID;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_objects;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_weight;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_storyType;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t RankingStory::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RankingStory");
  xfer += prot_->serializedFieldSize("storyID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->storyID);
  xfer += prot_->serializedFieldSize("objects", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingObject>>::serializedSize<false>(*prot_, this->objects);
  xfer += prot_->serializedFieldSize("weight", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->weight);
  xfer += prot_->serializedFieldSize("storyType", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingStoryType>::serializedSize<false>(*prot_, this->storyType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RankingStory::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RankingStory");
  xfer += prot_->serializedFieldSize("storyID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->storyID);
  xfer += prot_->serializedFieldSize("objects", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingObject>>::serializedSize<false>(*prot_, this->objects);
  xfer += prot_->serializedFieldSize("weight", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->weight);
  xfer += prot_->serializedFieldSize("storyType", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingStoryType>::serializedSize<false>(*prot_, this->storyType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RankingStory::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RankingStory");
  xfer += prot_->writeFieldBegin("storyID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->storyID);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("objects", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingObject>>::write(*prot_, this->objects);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("weight", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->weight);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("storyType", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::ranking::RankingStoryType>::write(*prot_, this->storyType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void RankingStory::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t RankingStory::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t RankingStory::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t RankingStory::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void RankingStory::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t RankingStory::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t RankingStory::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t RankingStory::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // ranking
namespace ranking {

template <class Protocol_>
void RankingResponse::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_queryID:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->queryID, _readState);
    this->__isset.queryID = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_rankingStories:
  {
    _readState.beforeSubobject(iprot);
    
    this->rankingStories = ::std::vector< ::ranking::RankingStory>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingStory>>::read(*iprot, this->rankingStories);
    this->__isset.rankingStories = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_objectCounts:
  {
    _readState.beforeSubobject(iprot);
    
    this->objectCounts = ::std::vector<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::read(*iprot, this->objectCounts);
    this->__isset.objectCounts = true;
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_metadata:
  {
    
    iprot->readString(this->metadata);
    this->__isset.metadata = true;
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<RankingResponse>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_queryID;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_rankingStories;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_objectCounts;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_metadata;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t RankingResponse::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RankingResponse");
  xfer += prot_->serializedFieldSize("queryID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->queryID);
  xfer += prot_->serializedFieldSize("rankingStories", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingStory>>::serializedSize<false>(*prot_, this->rankingStories);
  xfer += prot_->serializedFieldSize("objectCounts", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::serializedSize<false>(*prot_, this->objectCounts);
  xfer += prot_->serializedFieldSize("metadata", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->metadata);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RankingResponse::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RankingResponse");
  xfer += prot_->serializedFieldSize("queryID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->queryID);
  xfer += prot_->serializedFieldSize("rankingStories", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingStory>>::serializedSize<false>(*prot_, this->rankingStories);
  xfer += prot_->serializedFieldSize("objectCounts", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::serializedSize<false>(*prot_, this->objectCounts);
  xfer += prot_->serializedFieldSize("metadata", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->metadata);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RankingResponse::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RankingResponse");
  xfer += prot_->writeFieldBegin("queryID", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->queryID);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("rankingStories", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::ranking::RankingStory>>::write(*prot_, this->rankingStories);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("objectCounts", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::write(*prot_, this->objectCounts);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("metadata", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->metadata);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void RankingResponse::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t RankingResponse::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t RankingResponse::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t RankingResponse::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void RankingResponse::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t RankingResponse::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t RankingResponse::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t RankingResponse::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // ranking
