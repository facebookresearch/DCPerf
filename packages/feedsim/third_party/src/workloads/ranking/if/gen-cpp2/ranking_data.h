/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_data_h.h>

#include "ranking/if/gen-cpp2/ranking_types.h"

namespace ranking {

struct _RankingStoryTypeEnumDataStorage {
  using type = RankingStoryType;
  static constexpr const std::size_t size = 26;
  static constexpr const std::array<RankingStoryType, 26> values = {{
    RankingStoryType::STORY_TYPE_A,
    RankingStoryType::STORY_TYPE_B,
    RankingStoryType::STORY_TYPE_C,
    RankingStoryType::STORY_TYPE_D,
    RankingStoryType::STORY_TYPE_E,
    RankingStoryType::STORY_TYPE_F,
    RankingStoryType::STORY_TYPE_G,
    RankingStoryType::STORY_TYPE_H,
    RankingStoryType::STORY_TYPE_I,
    RankingStoryType::STORY_TYPE_J,
    RankingStoryType::STORY_TYPE_K,
    RankingStoryType::STORY_TYPE_L,
    RankingStoryType::STORY_TYPE_M,
    RankingStoryType::STORY_TYPE_N,
    RankingStoryType::STORY_TYPE_O,
    RankingStoryType::STORY_TYPE_P,
    RankingStoryType::STORY_TYPE_Q,
    RankingStoryType::STORY_TYPE_R,
    RankingStoryType::STORY_TYPE_S,
    RankingStoryType::STORY_TYPE_T,
    RankingStoryType::STORY_TYPE_U,
    RankingStoryType::STORY_TYPE_V,
    RankingStoryType::STORY_TYPE_W,
    RankingStoryType::STORY_TYPE_X,
    RankingStoryType::STORY_TYPE_Y,
    RankingStoryType::STORY_TYPE_Z,
  }};
  static constexpr const std::array<folly::StringPiece, 26> names = {{
    "STORY_TYPE_A",
    "STORY_TYPE_B",
    "STORY_TYPE_C",
    "STORY_TYPE_D",
    "STORY_TYPE_E",
    "STORY_TYPE_F",
    "STORY_TYPE_G",
    "STORY_TYPE_H",
    "STORY_TYPE_I",
    "STORY_TYPE_J",
    "STORY_TYPE_K",
    "STORY_TYPE_L",
    "STORY_TYPE_M",
    "STORY_TYPE_N",
    "STORY_TYPE_O",
    "STORY_TYPE_P",
    "STORY_TYPE_Q",
    "STORY_TYPE_R",
    "STORY_TYPE_S",
    "STORY_TYPE_T",
    "STORY_TYPE_U",
    "STORY_TYPE_V",
    "STORY_TYPE_W",
    "STORY_TYPE_X",
    "STORY_TYPE_Y",
    "STORY_TYPE_Z",
  }};
};

} // ranking
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::ranking::RankingStoryType> {
  using storage_type = ::ranking::_RankingStoryTypeEnumDataStorage;
};

}} // apache::thrift
namespace ranking {

struct _RankingObjectTypeEnumDataStorage {
  using type = RankingObjectType;
  static constexpr const std::size_t size = 26;
  static constexpr const std::array<RankingObjectType, 26> values = {{
    RankingObjectType::OBJ_TYPE_A,
    RankingObjectType::OBJ_TYPE_B,
    RankingObjectType::OBJ_TYPE_C,
    RankingObjectType::OBJ_TYPE_D,
    RankingObjectType::OBJ_TYPE_E,
    RankingObjectType::OBJ_TYPE_F,
    RankingObjectType::OBJ_TYPE_G,
    RankingObjectType::OBJ_TYPE_H,
    RankingObjectType::OBJ_TYPE_I,
    RankingObjectType::OBJ_TYPE_J,
    RankingObjectType::OBJ_TYPE_K,
    RankingObjectType::OBJ_TYPE_L,
    RankingObjectType::OBJ_TYPE_M,
    RankingObjectType::OBJ_TYPE_N,
    RankingObjectType::OBJ_TYPE_O,
    RankingObjectType::OBJ_TYPE_P,
    RankingObjectType::OBJ_TYPE_Q,
    RankingObjectType::OBJ_TYPE_R,
    RankingObjectType::OBJ_TYPE_S,
    RankingObjectType::OBJ_TYPE_T,
    RankingObjectType::OBJ_TYPE_U,
    RankingObjectType::OBJ_TYPE_V,
    RankingObjectType::OBJ_TYPE_W,
    RankingObjectType::OBJ_TYPE_X,
    RankingObjectType::OBJ_TYPE_Y,
    RankingObjectType::OBJ_TYPE_Z,
  }};
  static constexpr const std::array<folly::StringPiece, 26> names = {{
    "OBJ_TYPE_A",
    "OBJ_TYPE_B",
    "OBJ_TYPE_C",
    "OBJ_TYPE_D",
    "OBJ_TYPE_E",
    "OBJ_TYPE_F",
    "OBJ_TYPE_G",
    "OBJ_TYPE_H",
    "OBJ_TYPE_I",
    "OBJ_TYPE_J",
    "OBJ_TYPE_K",
    "OBJ_TYPE_L",
    "OBJ_TYPE_M",
    "OBJ_TYPE_N",
    "OBJ_TYPE_O",
    "OBJ_TYPE_P",
    "OBJ_TYPE_Q",
    "OBJ_TYPE_R",
    "OBJ_TYPE_S",
    "OBJ_TYPE_T",
    "OBJ_TYPE_U",
    "OBJ_TYPE_V",
    "OBJ_TYPE_W",
    "OBJ_TYPE_X",
    "OBJ_TYPE_Y",
    "OBJ_TYPE_Z",
  }};
};

} // ranking
namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::ranking::RankingObjectType> {
  using storage_type = ::ranking::_RankingObjectTypeEnumDataStorage;
};

}} // apache::thrift

